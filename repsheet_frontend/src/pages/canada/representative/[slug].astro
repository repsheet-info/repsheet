---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import db from '../../../utils/db';
import { assertIsMember } from '../../../types/guards';
import type { Member } from '../../../types/db';
import { makeMemberSlug } from '../../../utils/slug';
import PartyBadge from '../../../components/PartyBadge.astro';
import { memberTitle } from '../../../utils/member-title';
import FormattedSummary from '../../../components/FormattedSummary.astro';
import Issues from '../../../components/Issues.astro';
import { Aside } from '@astrojs/starlight/components';
import { buildToc } from '../../../utils/build-toc';
import { groupIssues } from '../../../utils/group-issues';
import { partyColors } from '../../../utils/party-colors';

// Get the slug from the URL
const { slug } = Astro.params;

const [firstName, lastName] = slug!.split('_');
const member = db.prepare('SELECT * FROM members WHERE LOWER("First Name") = LOWER(?) AND LOWER("Last Name") = LOWER(?)').get(firstName, lastName);

assertIsMember(member);

// For now, just display the slug as the name
// In the future, this will be replaced with actual data from a database or API
const name = memberTitle(member);

export function getStaticPaths() {
  const allMembers: Member[] = db.prepare('SELECT * FROM members').all();

  return allMembers.map((rep) => ({
    params: { slug: makeMemberSlug(rep) },
  }));
}

const {summary, issues} = member.Summary != null ? JSON.parse(member.Summary) : {};

const constituency = member.Constituency;
const province = member['Province / Territory'];

const groupedIssues = groupIssues(issues);

Astro.locals.repsheet = {
  toc: {
    items: [
      { depth: 1, slug: '_top', text: name, children: []},
      { depth: 1, slug: 'issues', text: 'Issues', children: []},
      ...buildToc(groupedIssues),
    ]
  }
}

const title = `${name}'s voting history`
const description = `Summarized voting history for ${name}.`
const shortSummary = member['Short Summary']
const photo = member['Photo URL']

Astro.locals.repsheet = {
  ...Astro.locals.repsheet,
  ogImage: photo
}

const party = member['Political Affiliation']

---

<StarlightPage frontmatter={{ 
  title, 
  description: shortSummary ?? description, 
  banner: summary ? undefined : { content:"This MP is not included in the beta"}
  }}>
  {shortSummary && <Aside type="tip" title="Voting history in a sentence">
    {shortSummary}
  </Aside>
  <div class="breakdown">
    <img src={photo} alt={`Photo of ${name}`} style={`background-color: ${partyColors[party as keyof typeof partyColors]};`}/>

    <dl style="margin-top: 0;">
      <dt>Current constituency</dt> 
      <dd>{constituency}</dd>
      <dt>Province / Territory</dt>
      <dd>{province}</dd>
      <dt>Party</dt>
      <dd><PartyBadge party={member['Political Affiliation']} /></dd>
    </dl>
  </div>
  }
  {summary ? (

   <>
    <h2>Overall summary</h2>
    <FormattedSummary summary={summary} />
    <Issues issues={issues}>
      <p slot="no-issues">This representative has not been summarized into specific issues.</p>
    </Issues>
   </> 
  ) : (
    <Aside type="danger">We haven't summarized this representative yet. We will soon, but are testing out a smaller section of the site first to save on costs.</Aside>
  )}

</StarlightPage>

<style>
  .breakdown {
    display: flex;
    flex-direction: row;
    gap: 2rem;
  }

  .breakdown img {
    max-height: 400px;
    width: 150px;
  }
</style>